# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(gadebug)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	message(STATUS "Fetching vcpkg (2022.03.10)...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2022.03.10.tar.gz")
	FetchContent_MakeAvailable(vcpkg)
	include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
endif()

include(FetchContent)

message(STATUS "Fetching safetyhook...")
FetchContent_Declare(safetyhook
	GIT_REPOSITORY
		"https://github.com/cursey/safetyhook"
)
FetchContent_MakeAvailable(safetyhook)

# Packages
find_package(bddisasm REQUIRED)

# Target gadebug
set(CMKR_TARGET gadebug)
set(gadebug_SOURCES "")

list(APPEND gadebug_SOURCES
	"src/main.cpp"
	"src/sdk.hpp"
	"src/sdk/ALAudio_classes.h"
	"src/sdk/ALAudio_f_structs.h"
	"src/sdk/ALAudio_functions.h"
	"src/sdk/ALAudio_structs.h"
	"src/sdk/Core_classes.h"
	"src/sdk/Core_f_structs.h"
	"src/sdk/Core_functions.h"
	"src/sdk/Core_structs.h"
	"src/sdk/Engine_classes.h"
	"src/sdk/Engine_f_structs.h"
	"src/sdk/Engine_functions.h"
	"src/sdk/Engine_structs.h"
	"src/sdk/GameFramework_classes.h"
	"src/sdk/GameFramework_f_structs.h"
	"src/sdk/GameFramework_functions.h"
	"src/sdk/GameFramework_structs.h"
	"src/sdk/TgClient_classes.h"
	"src/sdk/TgClient_f_structs.h"
	"src/sdk/TgClient_functions.h"
	"src/sdk/TgClient_structs.h"
	"src/sdk/TgGame_classes.h"
	"src/sdk/TgGame_f_structs.h"
	"src/sdk/TgGame_functions.h"
	"src/sdk/TgGame_structs.h"
	"src/sdk/TgNetDrv_classes.h"
	"src/sdk/TgNetDrv_f_structs.h"
	"src/sdk/TgNetDrv_functions.h"
	"src/sdk/TgNetDrv_structs.h"
	"src/sdk/UnrealScriptTest_classes.h"
	"src/sdk/UnrealScriptTest_f_structs.h"
	"src/sdk/UnrealScriptTest_functions.h"
	"src/sdk/UnrealScriptTest_structs.h"
	"src/sdk/WinDrv_classes.h"
	"src/sdk/WinDrv_f_structs.h"
	"src/sdk/WinDrv_functions.h"
	"src/sdk/WinDrv_structs.h"
	"src/sdk/XAudio2_classes.h"
	"src/sdk/XAudio2_f_structs.h"
	"src/sdk/XAudio2_functions.h"
	"src/sdk/XAudio2_structs.h"
)

list(APPEND gadebug_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${gadebug_SOURCES})
add_library(gadebug SHARED)

if(gadebug_SOURCES)
	target_sources(gadebug PRIVATE ${gadebug_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${gadebug_SOURCES})

target_compile_features(gadebug PUBLIC
	cxx_std_23
)

target_link_libraries(gadebug PUBLIC
	bddisasm::bddisasm
	safetyhook
)

set_target_properties(gadebug PROPERTIES
	CXX_STANDARD
		23
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

